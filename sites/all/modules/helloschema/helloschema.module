<?php

/**
 * @file
 * 
 * Simple schema based module to say hello to an user with color definition
 * from the module backend params
 */

/**
 * Implements hook_help()
 * 
 * @see hook_help()
 * 
 * @param path string
 *      With path of the site we're using to display help
 * 
 * @param arg array
 *      Array that holds the current path as returned from arg() function
 * 
 * @return string translated content string
 * 
 * @ingroup hook
 */
function helloschema_help($path, $arg) {
    switch ($path) {
        case 'admin/help#helloschema':
            return '<div id="helloschema-help">'
                . t(
                    "<h1>helloschema:</h1>"
                    . "<p>- Configure my block on <a href=\"@blocks\">"
                    ."Blocks</a><br>- Configuration page on <a href=\"@cfg\">"
                    ."Config/helloschema</a></p>",
                    array(
                        "@blocks" => url("admin/structure/block"),
                        "@cfg" => url("admin/config/helloschema")
                    )
                ) . '</div>';
            break;

        case 'admin/structure/block':
            return '<p id="helloschema-help">'
                . t("helloschema: Another help blabla...") . '</p>';
            break;
    }
}

/**
 * Implements hook_permission()
 * 
 * @see hook_help()
 * 
 * @return array translated content string
 * 
 * @ingroup hook
 */
function helloschema_permission() {
    return array(
        "manager helloschema 1" => array(
            "title" => t("First helloschema permission functionnality"),
            "description" => t(
                "Perform administration tasks about this functionnality"
                . " for helloschema Module"
            ),
            "restrict access" => FALSE,
            "warning" => t(
                "My helloschema message override when 'restric access' is set to"
                . " FALSE. Adding this in the description is most likely a "
                . "good practice."
            )
        )
    );
}

/**
 * Implements hook_block_info()
 * 
 * @see hook_block_info()
 * 
 * @var $blocks array Array of blocks contains block informations
 * 
 * @return array $blocks
 * 
 * @ingroup hook
 */
function helloschema_block_info() {
    $blocks['helloschema'] = array(
        "info" => t("My custom block (helloschema)"),
        "cache" => DRUPAL_NO_CACHE
    );

    return $blocks;
}

/**
 * Implements hook_block_view()
 * 
 * @see hook_block_view()
 * 
 * @var $block array
 *      Array of block informations
 * 
 * @return array $block
 * 
 * @ingroup hook
 */
function helloschema_block_view($delta = "") {
    $block = array();

    switch ($delta) {
        case "helloschema":
            $block["subject"] = t("helloschema Subject");
            $block["content"] = t('<b>helloschema</b> content: "Hello :)"');
            break;
    }

    return $block;
}

/**
 * Implements hook_menu()
 * 
 * @see hook_menu()
 * 
 * @var $items array
 *      Array of menu items informations
 * 
 * @return array $items
 * 
 * @ingroup hook
 */
function helloschema_menu() {
    $items["hellopage"] = array(
        "title" => t("My Helloschema Static Page"),
        "type" => MENU_NORMAL_ITEM,
        "page callback" => "helloschema_hellopage",
        "access arguments" => array("access content")
    );

    $items["admin/config/helloschema"] = array(
        "title" => t("Helloschema Settings Page"),
        "type" => MENU_NORMAL_ITEM,
        "page callback" => "drupal_get_form",
        "page arguments" => array("helloschema_form"),
        "access arguments" => array("access administration page")
    );

    return $items;
}

/**
 * Hellopage callback function
 * 
 * @see helloschema_menu()
 * 
 * @return string 
 * 
 * @ingroup callback
 */
function helloschema_hellopage() {
    $statement = db_select("helloschema_countries", 'hsc')
        ->fields('hsc')
        ->orderBy("name", "DESC")
        ->execute();

    $results = $statement->fetchAll(PDO::FETCH_ASSOC);

    $html = "<h1>Database result from helloschema_countries table:</h1>\n";

    foreach($results as $record) {
        $html .= "<li>" . $record["name"] . ' (' . $record["alpha2"] . ')</li>';
    }

    return $html;
}

/**
 * Implements hook_form()
 * 
 * @see hook_form()
 * 
 * @param $form array
 *      An array that represent the form definition
 * 
 * @param $form_state array
 *      Reference to the output array that respresent the form state
 * 
 * @return array
 *      ???
 * 
 * @ingroup callback
 */
function helloschema_form($form, &$form_state) {
    $form["helloblock_title_color"] = array(
        "#type" => "textfield",
        "#title" => t("Title color for the helloschema page"),
        "#default_value" => "#000000",
        "#size" => 7,
        "#maxlength" => 7,
        "#description" => t("Select or fill a hexadecimal color value"),
        "#required" => TRUE
    );

    return system_settings_form($form);
}
